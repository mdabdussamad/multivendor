// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// title, couponCode, expiryDate

model Coupon {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId  
  title       String
  couponCode  String
  expiryDate  DateTime
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Banner {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  link        String 
  imageUrl    String
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
// * * * * * * * * * * * * * * * * * * * * * * **
// * Relationship                               *     
// * ------------                               *  
// * 1 to 1 Relationship => Profile Relation    *
// * 1 to Many => Category => Product Relation  *
// * Many to Many => Market => Category         *
// * * * * * * * * * * * * * * * * * * * * * * **


model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  slug        String    @unique
  imageUrl    String?
  description String?  
  isActive    Boolean 
  products    Product[] 
  trainings   Training[] 

  marketIds   String[]  @db.ObjectId
  markets     Market[]  @relation(fields: [marketIds], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String    
  slug        String    @unique
  logoUrl     String?
  description String?  
  isActive    Boolean   
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}
model Product {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String     @unique
  slug          String     @unique
  imageUrl      String?
  description   String?
  isActive      Boolean
  sku           String?
  barcode       String
  productPrice  Float
  salePrice     Float
  tags          String[]
 
  category      Category   @relation(fields: [categoryId], references: [id])
  categoryId    String     @db.ObjectId
 
  user          User      @relation(fields: [userId], references: [id])
  userId        String     @db.ObjectId @unique

  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt
}

model Training {  
  id             String     @id @default(auto()) @map("_id") @db.ObjectId 
  title          String 
  slug           String     @unique
  imageUrl       String 
  description    String 
  content        String 
  isActive       Boolean 
  category       Category   @relation(fields: [categoryId], references: [id])
  categoryId     String     @db.ObjectId    
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  password      String
  emailVerified DateTime?  

  products      Product[]

  role          UserRole   @default(USER) 

  farmerProfile FarmerProfile?
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt   
}

model FarmerProfile {
  id                     String     @id @default(auto()) @map("_id") @db.ObjectId
  code                   String
  contactPerson          String? 
  contactPersonPhone     String?
  profileImageUrl        String?
  email                  String
  name                   String
  notes                  String? 
  phone                  String
  physicalAddress        String?
  terms                  String?
  isActive               Boolean
  products               String[] 
  landSize               Float  
  mainCrop               String 
  
  user                   User      @relation(fields: [userId], references: [id])
  userId                 String     @db.ObjectId @unique
 
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
}

// User:- ADMIN TEACHER PARENT STUDENT

